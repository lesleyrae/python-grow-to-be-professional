#并不是所有数据都满足正太分析(大数据分析很多都没有)
#期望值为0，标准差为1的标准正态分布
#通过正态分布作为参考去理解事物的规律
#（1）直方图初判（2）qq图判断（3）k-s检验
#（1）直方图
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#正太分析随机数
s=pd.DataFrame(np.random.randn(1000)+100,columns=['values'])
print(s.head())
figs=plt.figure(figsize=(10,6))
ax1=figs.add_subplot(2,1,1)
ax1.scatter(s.index,s.values)

#设置第二层画布
ax2=figs.add_subplot(2,1,2)
#直方图
s.hist(bins=30,alpha=0.8,edgecolor='k',ax=ax2)
#参考线
s.plot(kind='kde',color='r',ax=ax2,secondary_y=True)
#qq图
# QQ图判断
# QQ图通过把测试样本数据的分位数与已知分布相比较，从而来检验数据的分布情况

# QQ图是一种散点图，对应于正态分布的QQ图，就是由标准正态分布的分位数为横坐标，样本值为纵坐标的散点图
# 参考直线：四分之一分位点和四分之三分位点这两点确定，看散点是否落在这条线的附近

# 绘制思路
# ① 在做好数据清洗后，对数据进行排序（次序统计量：x(1)<x(2)<....<x(n)）
# ② 排序后，计算出每个数据对应的百分位p{i}，即第i个数据x(i)为p(i)分位数，其中p(i)=(i-0.5)/n （pi有多重算法，这里以最常用方法为主）
# ③ 绘制直方图 + qq图，直方图作为参考

s=pd.DataFrame(np.random.rand(1000)+10,columns=['value'])

#排序
mean1=s['value'].mean()
std1=s['value'].std()
s.sort_values(by ='value',inplace=True)
#index 也要排序,DROP表示是否删除原来的数据
s_r=s.reset_index(drop=False)
#百分位p(i)=(i-0.5)/n 
s_r['p']=(s_r.index-0.5)/len(s_r)
#q值
s_r['q']=(s['value']-mean1)/std1
print(s_r.head())
s_r.hist

#直方图
fig1=plt.figure(figsize=(10,6))
ax1=fig1.add_subplot(3,1,1)
ax1.scatter(s.index,s.value)
ax2=fig1.add_subplot(3,1,2)
s.hist(bins=30,color='g',ax=ax2,edgecolor='k')
ax3=fig1.add_subplot(3,1,3)
#qq线代表横轴是百分位，纵轴是q值的线
ax3.plot(s_r['p'],s_r['q'],alpha=0.1,color='k')
#找出25%,75%参考点
st=s['value'].describe()
x1,y1=0.25,st['25%']
x2,y2=0.75,st['75%']
#链接(x1,x2),(y1,y2)找出参考线，是否在qq线上
ax3.plot([x1,x2],[y1,y2],color='r',alpha=0.8)

（3）#k-s检验
from scipy import stats
data= [87,77,92,68,80,78,84,77,81,80,80,77,92,86,
       76,80,81,75,77,72,81,72,84,86,80,68,77,87,
       76,77,78,92,75,80,78]
df=pd.DataFrame(data,columns=['value'])
print(df.head())
#找到平均数和标准差
u=df['value'].mean()
std=df['value'].std()
#使用stats.kstest，如果p>0.05，就有正态分布，参数分别是：待检验的数据，检验方法（这里设置成norm正态分布），均值与标准差
stats.kstest(df['value'],'norm',(u,std))

#2.相关分析
#(1)图示判断
data1=pd.Series(np.random.rand(50)*100).sort_values()
data2=pd.Series(np.random.rand(50)*50).sort_values()
data3=pd.Series(np.random.rand(50)*500).sort_values(ascending=False)
fig=plt.figure(figsize=(10,4))
#正相关
ax1=fig.add_subplot(1,2,1)
ax1.scatter(data1,data2)
plt.grid()
#负相关
ax2=fig.add_subplot(1,2,2)
ax2.scatter(data2,data3)
plt.grid()

#多个变量的线性相关
#200个分成4组的随机数
data=pd.DataFrame(np.random.rand(200,4)*100,columns=['a','b','c','d'])
#矩阵散点图 pd.plotting.scatter_matrix(data,figsize=,color,diagnoal='')
pd.plotting.scatter_matrix(data,figsize=(8,8),color='b',diagonal='kde',range_padding=0.1)
data.head()

#（3）peason 相关系数
#要求满足正态分布
#首先判断是否符合正态分布,x和y都要判断
data = pd.DataFrame({'智商':[106,86,100,101,99,103,97,113,112,110],
                    '每周看电视小时数':[7,0,27,50,28,29,20,12,6,17]})
u1,u2=data['每周看电视小时数'].mean(),data['智商'].mean()
std1,std2,=data['每周看电视小时数'].std(),data['智商'].std()
stats.kstest(data['每周看电视小时数'],'norm',(u1,std1))
stats.kstest(data['每周看电视小时数'],'norm',(u2,std2))
#>0.05都是正态分布
data.corr()
#r>0.8是高度相关
#如果没有正态分布
#（4）spearman相关系数
#按照秩进行相关分析，顺序的意思
data.corr(method='spearman')
