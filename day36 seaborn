import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
% matplotlib inline


1、默认风格，固定风格
sns.set()
2、set_style()
# 切换seaborn图表风格
# 风格选择包括："white", "dark", "whitegrid", "darkgrid", "ticks"
sns.set_style("ticks")
3、despine()
# 设置图表坐标轴
# seaborn.despine(fig=None, ax=None, top=True, right=True, left=False, 
# bottom=False, offset=None, trim=False)
#offset 偏移
#left (是否隐藏)
sns.despine(offset=10,left=True,right=False)
# 删除了上、右坐标轴
4、axes_style()
# 设置局部图表风格，可学习和with配合的用法
with sns.axes_style("darkgrid"):
    plt.subplot(211)
    sinplot()
# 设置局部图表风格，用with做代码块区分
5、set_context()
# 设置显示比例尺度
# 选择包括：'paper', 'notebook', 'talk', 'poster'
sns.set_context("notebook")

'''
【课程2.3】  调色盘

对图表整体颜色、比例等进行风格设置，包括颜色色板等
调用系统风格进行数据可视化

color_palette()

'''

1、color_palette()
# 默认6种颜色：deep, muted, pastel, bright, dark, colorblind
# seaborn.color_palette(palette=None, n_colors=None, desat=None)
#读取默认颜色
current_palette = sns.color_palette()
#显示调色盘
sns.palplot(current_palette)
# 其他颜色风格
# 风格内容：Accent, Accent_r, Blues, Blues_r, BrBG, BrBG_r, BuGn, BuGn_r, BuPu, 
# BuPu_r, CMRmap, CMRmap_r, Dark2, Dark2_r, GnBu, GnBu_r, Greens, Greens_r, Greys, Greys_r, OrRd, OrRd_r, Oranges, Oranges_r, PRGn, PRGn_r, 
# Paired, Paired_r, Pastel1, Pastel1_r, Pastel2, Pastel2_r, PiYG, PiYG_r, PuBu, PuBuGn, PuBuGn_r, PuBu_r, PuOr, PuOr_r, PuRd, PuRd_r, Purples,
# Purples_r, RdBu, RdBu_r, RdGy, RdGy_r, RdPu, RdPu_r, RdYlBu, RdYlBu_r, RdYlGn, RdYlGn_r, Reds, Reds_r, Set1, Set1_r, Set2, Set2_r, Set3, 
# Set3_r, Spectral, Spectral_r, Wistia, Wistia_r, YlGn, YlGnBu, YlGnBu_r, YlGn_r, YlOrBr, YlOrBr_r, YlOrRd, YlOrRd_r, afmhot, afmhot_r, 
# autumn, autumn_r, binary, binary_r, bone, bone_r, brg, brg_r, bwr, bwr_r, cool, cool_r, coolwarm, coolwarm_r, copper, copper_r, cubehelix, 
# cubehelix_r, flag, flag_r, gist_earth, gist_earth_r, gist_gray, gist_gray_r, gist_heat, gist_heat_r, gist_ncar, gist_ncar_r, gist_rainbow, 
# gist_rainbow_r, gist_stern, gist_stern_r, gist_yarg, gist_yarg_r, gnuplot, gnuplot2, gnuplot2_r, gnuplot_r, gray, gray_r, hot, hot_r, hsv, 
# hsv_r, icefire, icefire_r, inferno, inferno_r, jet, jet_r, magma, magma_r, mako, mako_r, nipy_spectral, nipy_spectral_r, ocean, ocean_r, 
# pink, pink_r, plasma, plasma_r, prism, prism_r, rainbow, rainbow_r, rocket, rocket_r, seismic, seismic_r, spectral, spectral_r, spring, 
# spring_r, summer, summer_r, terrain, terrain_r, viridis, viridis_r, vlag, vlag_r, winter, winter_r

sns.palplot(sns.color_palette('spring', 20))
# 这里颜色风格为 hls
# 颜色色块个数为8个
# 风格颜色反转(不是所有颜色都可以反转)：Blues/Blues_r

# 分组颜色设置 - "Paired"
sns.palplot(sns.color_palette("Paired",40))

2、设置亮度，饱和度
# 可用方法：
# ① husl_palette([n_colors, h, s, l])
# ② hls_palette([n_colors, h, l, s])

sns.palplot(sns.hls_palette(8, l=.4, s=.5))
# l → 亮度
# s → 饱和度

3、cubehelix_palette()
# 按照线性增长计算，设置颜色

sns.palplot(sns.cubehelix_palette(8, gamma=0.5))
sns.palplot(sns.cubehelix_palette(8, start=.2, rot=-.75))
sns.palplot(sns.cubehelix_palette(8, start=2, rot=0, dark=0, light=.95, reverse=True))

# n_colors → 颜色个数
# start → 值区间在0-3，开始颜色
# rot → 颜色旋转角度
# gamma → 颜色伽马值，越大颜色越暗
# dark，light → 值区间0-1，颜色深浅
# reverse → 布尔值，默认为False，由浅到深

4、dark_palette(color[, n_colors, reverse, ...]) / light_palette(color[, n_colors, reverse, ...])
# 颜色深浅
sns.palplot(sns.light_palette("green"))   # 按照green做浅色调色盘
#sns.palplot(sns.color_palette("Greens"))  # cmap为Greens风格

sns.palplot(sns.dark_palette("red", reverse=True))   # 按照blue做深色调色盘
# reverse → 转制颜色

5、diverging_palette()
# 创建分散颜色
# seaborn.diverging_palette(h_neg, h_pos, s=75, l=50, sep=10, n=6, 
# center='light', as_cmap=False)¶

sns.palplot(sns.diverging_palette(145, 280, s=85, l=25, n=7))
# h_neg, h_pos → 起始/终止颜色值
# s → 值区间0-100，饱和度
# l → 值区间0-100，亮度
# n → 颜色个数
# center → 中心颜色为浅色还是深色“light”，“dark”,默认为light

【案例】
# 设置调色板后，绘图创建图表
sns.set_style("whitegrid")
# 设置风格
with sns.color_palette("Greens"):
    plt.subplot(211)
    sinplot()
sns.set_palette("Wistia")
plt.subplot(212)
sinplot()
# 绘制系列颜色

'''
【课程2.4】  分布数据可视化 - 直方图与密度图

distplot() / kdeplot() / rugplot() 

'''
sns.set_style('darkgrid')
sns.set_context('paper')
sns.set_palette("Blues")
# 设置风格、尺度
import warnings
warnings.filterwarnings('ignore') 
# 不发出警告

# 直方图-distplot()
rs=np.random.RandomState(10)# 设定随机数种子
s=pd.Series(rs.random.randn(100)*100)
sns.distplot(s,bins=10,hist=True,kde=False,norm_hist=False,
            rug=True, vertical=False, color='y',label='distplot',axlabel='x')
plt.legend()
# bins → 箱数
# hist、ked → 是否显示箱/密度曲线
# norm_hist → 直方图是否按照密度来显示
# rug → 是否显示数据分布情况
# vertical → 是否水平显示
# color → 设置颜色
# label → 图例
# axlabel → x轴标注

# 1、直方图 - distplot()
# 颜色详细设置
sns.distplot(s,rug=True,rug_kws={'color':'g'},
             # 设置数据频率分布颜色
             kde_kws={'color':'k','lw':1,'label':'kde','linestyle':'--'},
             # 设置密度曲线颜色，线宽，标注、线形
             hist_kws={'histtype':'step','linewidth':2,'alpha':1,'color':'g'}
              # 设置箱子的风格、线宽、透明度、颜色
            # 风格包括：'bar', 'barstacked', 'step', 'stepfilled'
            )

# 2、密度图 - kdeplot()
# 单个样本数据密度分布图
plt.figure(figsize=(10,8))
sns.kdeplot(s,
            shade=True,# 是否填充
            color='r',
            vertical=False # 设置是否水平
)

# bw → 控制拟合的程度，类似直方图的箱数
sns.kdeplot(s,bw=5,label='bw:0.2',linestyle='-',linewidth=1.2,alpha=0.8,color='k')
sns.kdeplot(s,bw=20, label="bw: 2",linestyle = '-',linewidth = 1.2,alpha = 0.8,color='g')
sns.rugplot(s,height = 0.1,color = 'b',alpha = 0.5)
# 数据频率分布图

# 2、密度图 - kdeplot()
# 两个样本数据密度分布图
rs = np.random.RandomState(2)  # 设定随机数种子
df=pd.DataFrame(rs.randn(100,2),columns=['a','b'])
sns.kdeplot(df['a'],df['b'],
            cbar=True, # 是否显示颜色图例
            shade=True, # 是否填充
            cmap='Reds', # 设置调色盘
            shade_lowest=False, # 最外围颜色是否显示
            n_levels = 10   # 曲线个数（如果非常多，则会越平滑）
           )

sns.rugplot(df['a'], color="g", axis='x',alpha = 0.5)
sns.rugplot(df['b'], color="r", axis='y',alpha = 0.5)
# 注意设置x，y轴

# 2、密度图 - kdeplot()
# 两个样本数据密度分布图
# 多个密度图
rs1=np.random.RandomState(2)
rs2=np.random.RandomState(5)
df1=pd.DataFrame(rs1.randn(100,2)+5,columns=['a','b'])
df2=pd.DataFrame(rs2.randn(100,2)-5,columns=['a','b'])
sns.kdeplot(df1['a'],df['b'],cbar=True,shade=True,cmap='Reds', shade_lowest=False)

'''
【课程2.5】  分布数据可视化 - 散点图

jointplot() / pairplot()

'''
# 1、综合散点图 - jointplot()
# 散点图 + 分布图
# 创建数据
rs=np.random.RandomState(2)
df=pd.DataFrame(rs.randn(200,2),columns=['a','b'])

sns.jointplot(x=df['a'],y=df['b'], # 设置xy轴，显示columns名称
             data=df, # 设置数据
             color='k',
             s=50,edgecolor='w',linewidth=1, #设置散点大小、边缘线颜色及宽度(只针对scatter）
             kind='scatter', # 设置类型：“scatter”、“reg”、“resid”、“kde”、“hex”
             space=0.2, # 设置散点图和布局图的间距
             size=8, # 图表大小（自动调整为正方形）
             ratio=5,# 散点图与布局图高度比，整型
             marginal_kws=dict(bins=15, rug=True)  # 设置柱状图箱数，是否设置rug
              )  
sns.kdeplot(df2['a'],df2['b'],cbar=True,shade=True,cmap='Greens', shade_lowest=False)

# 1、综合散点图 - jointplot()
# 散点图 + 分布图
# 六边形图
df2=pd.DataFrame(rs2.randn(500,2)-5,columns=['a','b'])
with sns.axes_style('white'):
    sns.jointplot(x=df['a'],y=df['b'],data=df,kind='hex',color='k',
    marginal_kws=dict(bins=20))

# 1、综合散点图 - jointplot()
# 散点图 + 分布图
# 密度图

rs = np.random.RandomState(15)
df = pd.DataFrame(rs.randn(300,2),columns = ['a','b'])
# 创建数据

# 创建密度图
g= sns.jointplot(x=df['a'],y=df['b'],data=df,kind='kde',color='g',shade_lowest=False)
# 添加散点图
g.plot_joint(plt.scatter,c="w", s=30, linewidth=1, marker="+")

# 1、综合散点图 - JointGrid()
# 可拆分绘制的散点图
# plot_joint() + ax_marg_x.hist() + ax_marg_y.hist()
import pandas as pd
tips=pd.read_csv('/Users/rae616188919/Desktop/seaborn-data-master/tips.csv')
print(tips.head())
g=sns.JointGrid(x='total_bill',y='tip',data=tips)
# 创建一个绘图表格区域，设置好x、y对应数据
g.plot_joint(plt.scatter,color='m',edgecolor='white')
# 设置x轴直方图，注意bins是数组
g.ax_marg_x.hist(tips['total_bill'],color='b',alpha=0.6,bins=np.arange(0,60,3))
# 设置y轴直方图，注意需要orientation参数
g.ax_marg_y.hist(tips['tip'],color='r',alpha=0.6,orientation='horizontal',bins=np.arange(0,12,1))
#相关系数
from scipy import stats
g.annotate(stats.pearsonr)

# 1、综合散点图 - JointGrid()
# 可拆分绘制的散点图
# plot_joint() + plot_marginals()
g=sns.JointGrid(x='total_bill',y='tip',data=tips)

 # 绘制散点图
g=g.plot_joint(plt.scatter,color='g',s=40,edgecolor='white')
g.plot_marginals(sns.distplot,kde=True,color='g')

# 1、综合散点图 - JointGrid()
# 可拆分绘制的散点图
# plot_joint() + plot_marginals()
# kde - 密度图
# 创建一个绘图表格区域，设置好x、y对应数据
g=sns.JointGrid(x='total_bill',y='tip',data=tips)
# 绘制密度图
g=g.plot_joint(sns.kdeplot,cmap='Reds_r')
# 绘制x，y轴密度图
g.plot_marginals(sns.kdeplot,shade=True,color='r')

# 2、矩阵散点图 - pairplot()
# 设置风格
sns.set_style('white')
iris=pd.read_csv('/Users/rae616188919/Desktop/seaborn-data-master/iris.csv')
print(iris.head())

sns.pairplot(iris,
            kind='scatter',# 散点图/回归分布图 {‘scatter’, ‘reg’}  
            diag_kind='hist', # 直方图/密度图 {‘hist’, ‘kde’}
            hue='species', # 按照某一字段进行分类
            palette='husl', # 设置调色板
            markers=['o','s','D'],
            size=2,
            )
            
# 2、矩阵散点图 - pairplot()
# 只提取局部变量进行对比

sns.pairplot(iris,vars=["sepal_width", "sepal_length"],
             kind = 'reg', diag_kind="kde", 
             hue="species", palette="husl")
 
2、矩阵散点图 - pairplot()
# 其他参数设置
sns.pairplot(iris,diag_kind='kde',markers='+',palette = 'Blues',
            plot_kws=dict(s=50,edgecolor='b',linewidth=1),
            # 设置点样式
            diag_kws=dict(shade=True)
            # 设置密度图样式
            )

2、矩阵散点图 - PairGrid()
# 可拆分绘制的散点图
# map_diag() + map_offdiag()
# 创建一个绘图表格区域，设置好x、y对应数据，按照species分类
g=sns.PairGrid(iris,hue='species',palette='hls', vars = ['sepal_length','sepal_width','petal_length','petal_width'])
# 对角线图表，plt.hist/sns.kdeplot
g.map_diag(plt.hist,histtype='barstacked',linewidth=1,edgecolor='w')# 可选：'bar', 'barstacked', 'step', 'stepfilled'
# 其他图表，plt.scatter/plt.bar...
g.map_offdiag(plt.scatter,edgecolor='w',s=40,linewidth=1) # 设置点颜色、大小、描边宽度
g.add_legend()

2、矩阵散点图 - PairGrid()
# 可拆分绘制的散点图
# map_diag() + map_lower() + map_upper()

g=sns.PairGrid(iris)
g.map_diag(sns.kdeplot,lw=3)

g.map_upper(plt.scatter,color='r')
 # 设置对角线下端图表 密度图
g.map_lower(sns.kdeplot,cmap='Blues')
