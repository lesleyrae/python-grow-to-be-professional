import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

n=10000
r=1.0
a,b=(0,0)

#构建画布的点 a-r,b+r
xmin,xmax=a-r,a+r
ymin,ymax=b-r,b+r
#构建随机数，
x=np.random.uniform(xmin,xmax,n)
y=np.random.uniform(ymin,ymax,n)
fig=plt.figure(figsize=(6,6))
axes=fig.add_subplot(1,1,1)
plt.plot(x,y,'ro',markersize=1)
plt.axis('equal')

#构建距离圆心的距离
d=np.sqrt((x-a)**2+(y-b)**2)
#sum(np.where(d<r,1,0))
res=sum(np.where(d<r,1,0))
print(4*res/n)

from matplotlib.patches import Circle
# 引入cirlce(xy=(a,b),radius=,alpha=)
circle=Circle(xy=(a,b),radius=r,alpha=0.5,color='gray')
#
axes.add_patch(circle)
plt.grid(True,linestyle='--',linewidth='0.8')
plt.show()

#积分计算
n=10000
#投点次数

xmin,xmax=0,1
ymin,ymax=0,1

x=np.random.uniform(xmin,xmax,n)
y=np.random.uniform(ymin,ymax,n)

def f(x):
    return x**2

fig=plt.figure(figsize=(6,6))
axes=fig.add_subplot(1,1,1)
plt.plot(x,y,'ro',markersize=1)
plt.axis('equal')

res=sum(np.where(d<r,1,0))

integral=res/n
print(integral)

xi=np.linspace(0,1,100)
yi=xi**2
plt.plot(xi,yi,'--k')
#对图像进行补充
plt.fill_between(xi,yi,0,color='gray',alpha=0.5,label='area')
plt.grid()

#排队上厕所
#每个人达到的时间，10分钟内
arrivingtime=np.random.uniform(0,10,size=20)
arrivingtime.sort()
#每个人上厕所的时间，1-3分钟内
workingtime=np.random.uniform(1,3,size=20)

#开始、结束、等待、空闲的时间
startingtime=[0  for i in range(20)]
finishingtime=[0 for i in range(20)]
waitingtime=[0 for i in range(20)]
emptytime=[0 for i in range(20)]

#开始、结束、等待、空闲的时间
#第一个开始时间=到达时间
startingtime[0]=arrivingtime[0]
#第一个结束时间=开始时间+工作时间
finishingtime[0]=startingtime[0]+workingtime[0]
waitingtime[0]=arrivingtime[0]-startingtime[0]

#对于从1到20个人来说
for i in range(1,len(arrivingtime)):
    #如果前一个人的结束时间>后一个人的开始时间
    if finishingtime[i-1]>arrivingtime[i]:
        #前一个人的结束时间=后一个人的开始时间
        startingtime[i]=finishingtime[i-1]
    #如果前一个人的结束时间<=后一个人的开始时间
    else:
        #后一个人的开始时间=到达时间
        startingtime[i]=arrivingtime[i]
        #空余时间=到达时间-前一个人的结束时间
        emptytime[i]=arrivingtime[i]-finishingtime[i-1]
    finishingtime[i]=startingtime[i]+workingtime[i]
    waitingtime[i]=startingtime[i] -arrivingtime[i]

fig=plt.figure(figsize=(6,4))
plt.plot(waitingtime,'--go')
plt.grid(True,linestyle='--',color='gray',linewidth='0.8')
plt.show()
