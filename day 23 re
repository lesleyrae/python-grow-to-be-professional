. 表示任何单个字符
[]字符集，对单个字符给出取值范围
[^]非字符集，对单个字符给出排除范围
*前一个字符0次或者无限次扩展
+前一个字符1次或无限次扩展
？前一个字符0次或者1次扩展
| 左右表达式任意一个
{m}扩展前一个字符m次
{m,n}扩展前一个字符m-n次
^abc 字符串开头
$abc 字符串结尾
( abc|cde )分组标记
\d 数字
\w 单词字符

^ [A-Za-z]+$  只有字母
^[A-Za-z0-9]+$ 字母+数字
^ -?\d$ 整数数字
^[0-9]*[1-9][0-9]*$ 正整数
[1-9]\d{5} 开始1-9.
[\u4e00-\u9fa5] 匹配中文字符
\d{3}-\d{8}|\d{4}-\d{7}

Ip 地址
\d+.\d+.\d+.\d+.
\d{1,3}.\d{1,3}.\d{1,3}
0-99:[1-9]?\d
100-199:1\d{2}
200-249:2[0-4]\d
250-255:25[0-5]

([1-9]?\d|1\d{2}|2[0-4]\d|25[0-5].){3}

re库基本使用
raw string类型
r'text'
r'[1-9]\d{5}
‘[1-9]\\d{5}’
转义符 的时候要用r'
re.search(pattern,string,flag)搜索
re.match()从头匹配
re.findall()搜索字符串、所有
re.spilt(pattern,string,maxsplit=0,flags=0) 分割
re.finditer() 返回迭代元素
re.sub(pattern,repl,string,count=0,flags=0) 

re.I 忽略大小写
re.M ^每行的开始
re.S 对.操作符匹配所有字符（除了换行符）

面向对象用法：编译后的多次操作
pat=re.compile(r'[1-9]\d{5})
rst=pat.search
regex=re.compile()

match对象的属性
.string（带匹配的文本）
.re
.pos
.endpos

方法
group(0) 匹配后的字符串
start() 开始的位置
end() 结束位置
span

re库的贪婪匹配和最小匹配
match=re.search(r'PY,*N','pyanbncndn')
match.group(0)
默认返回最长的函数串
match=re.search(r'PY,*?N','pyanbncndn')
最小匹配
*?前一个0次字符或无限次扩展，最小匹配
+?前一个1次字符或无限次扩展，最小匹配
？?前一个0次字符或1次扩展，最小匹配
{m,n}?前一个m次字符到n次扩展，最小匹配
