# 缺失值的处理：删除记录 / 数据插补 / 不处理

#判断是否有缺失值-isnull notnull
# isnull：缺失值为True，非缺失值为False
# notnull：缺失值为False，非缺失值为True
s=pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])
df=pd.DataFrame({'value1':[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],'value2':['a','b','c','d','e',np.nan,np.nan,'f','g',np.nan,'g']})
print(s.isnull())
print(df.notnull())
#通过索引判断
print(df['value1'].notnull())

#选出不是缺失值的列
s2=s[s.isnull()==False]
#选出df中values2 notnull的值
df2=df[df['value2'].notnull()]
print(s2)
print(df2)

#删除缺失值- dropna(inplace=True)
s=pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])
df = pd.DataFrame({'value1':[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],
                  'value2':['a','b','c','d','e',np.nan,np.nan,'f','g',np.nan,'g']})
s.dropna(inplace=True)
df2=df['value1'].dropna()
print(s)
print(df2)

# 填充/替代缺失值-fillna\replace
s = pd.Series([12,33,45,23,np.nan,np.nan,66,54,np.nan,99])
df = pd.DataFrame({'value1':[12,33,45,23,np.nan,np.nan,66,54,np.nan,99,190],
                  'value2':['a','b','c','d','e',np.nan,np.nan,'f','g',np.nan,'g']})
#用0 补充缺失值
s.fillna(0,inplace=True)
print(s)
#用前一个数据进行补充ffill()
df3=df['value1'].ffill()
print(df3)
#用后一个数据补充bfill()
df4=df['value1'].bfill()
print(df4)

s = pd.Series([1,1,1,1,2,2,2,3,4,5,np.nan,np.nan,66,54,np.nan,99])
#用replace替代 replace(np.nan,'',inplace=True)
s.replace(np.nan,'缺失数据',inplace=True)
print(s)

s = pd.Series([1,2,3,np.nan,3,4,5,5,5,5,np.nan,np.nan,6,6,7,12,2,np.nan,3,4])
u=s.mean()
me=s.median()
mod=s.mode()
#用平均数代替fillna
s.fillna(u,inplace=True)
print(s)

#(2)临近值插补
s = pd.Series([1,2,3,np.nan,3,4,5,5,5,5,np.nan,np.nan,6,6,7,12,2,np.nan,3,4])
s.fillna(method='ffill',inplace=True)
print(s)

data=pd.Series(np.random.rand(100)*100)
data[3,6,33,56,45,66,67,80,90] = np.nan
print(data.head())
#检查缺失值
data_na=data[data.isnull()]
print(data_na)

data_c=data.fillna(data.median())
fig,axes=plt.subplots(1,4,figsize=(20,5))
#箱型图
data.plot.box(ax=axes[0],grid=True,title= '数据分布')
#点图
data.plot(kind='kde',style='--r',ax=axes[1],grid=True,title='删除缺失值',xlim=[-50,150])
#中值补充
data_c.plot(kind='kde',style='--b',ax=axes[2],grid=True,title='median',xlim=[-50,150])
#拉格朗日插值法
def na_c(s,n,k=2):
    y=s[list(range(n-k,n+1+k))]
    y=y[y.notnull()]
    return(lagrange(y.index,list(y))(n))
# 创建函数，做插值，由于数据量原因，以空值前后2个数据（共4个数据）为例做插值
na_re=[]
for i in range(len(data)):
    if data.isnull()[i]:
        data[i]=na_c(data,i)
        print(na_c(data,i))
        na_re.append(data[i])
data.dropna(inplace=True)
data.plot(kind='kde',style='--k',ax=axes[3],grid=True,title='lagrange',xlim=[-50,150])

##异常值
# 3σ原则 / 箱型图分析
#1）3σ原则：如果数据服从正态分布，异常值被定义为一组测定值中与平均值的偏差超过3倍的值 → p(|x - μ| > 3σ) ≤ 0.003
data=pd.Series(np.random.randn(10000)*100)
mean1=data.mean()
std1=data.std()
stats.kstest(data,'norm',(mean1,std1))
#p>0.05是正态分布

fig=plt.figure(figsize=(10,6))
ax1=fig.add_subplot(2,1,1)
data.plot(kind='kde',grid=True,style='--k',title='density curve')
#画出参考线axvline 3*std 和-3*std
plt.axvline(3*std1,color='r',linestyle='--',alpha=0.8)
plt.axvline(-3*std1,color='r',linestyle='--',alpha=0.8)
ax2=fig.add_subplot(2,1,2)
#选出异常值 abs(data-u)<3*std
error=data[np.abs(data-u)>3*std1]
data_c=data[np.abs(data-u)<=3*std1]
print(len(error))
#画散点图
plt.scatter(data_c.index,data_c,color='k',marker='.',alpha=0.8)
plt.scatter(error.index,error,color='r',marker='+',alpha=0.8)
plt.grid()
